<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="0" ignored="0" total="4" passed="4">
  <reporter-output>
  </reporter-output>
  <suite name="unit.FirstTestNGTest" duration-ms="41" started-at="2020-09-10T13:55:05Z" finished-at="2020-09-10T13:55:05Z">
    <groups>
    </groups>
    <test name="Command line test" duration-ms="41" started-at="2020-09-10T13:55:05Z" finished-at="2020-09-10T13:55:05Z">
      <class name="unit.FirstTestNGTest">
        <test-method status="PASS" signature="globalSetup()[pri:0, instance:unit.FirstTestNGTest@ba2a48]" name="globalSetup" is-config="true" duration-ms="11" started-at="2020-09-10T13:55:05Z" finished-at="2020-09-10T13:55:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- globalSetup -->
        <test-method status="PASS" signature="globalBeforeMethodSetup()[pri:0, instance:unit.FirstTestNGTest@ba2a48]" name="globalBeforeMethodSetup" is-config="true" duration-ms="1" started-at="2020-09-10T13:55:05Z" finished-at="2020-09-10T13:55:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- globalBeforeMethodSetup -->
        <test-method status="PASS" signature="customLocalSetupMethod(java.lang.reflect.Method)[pri:0, instance:unit.FirstTestNGTest@ba2a48]" name="customLocalSetupMethod" is-config="true" duration-ms="2" started-at="2020-09-10T13:55:05Z" finished-at="2020-09-10T13:55:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void unit.FirstTestNGTest.addDuplicateThrowsException() throws app.DuplicateUserException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- customLocalSetupMethod -->
        <test-method status="PASS" signature="addDuplicateThrowsException()[pri:0, instance:unit.FirstTestNGTest@ba2a48]" name="addDuplicateThrowsException" duration-ms="8" started-at="2020-09-10T13:55:05Z" finished-at="2020-09-10T13:55:05Z">
          <exception class="app.DuplicateUserException">
            <message>
              <![CDATA[User already exists]]>
            </message>
            <full-stacktrace>
              <![CDATA[app.DuplicateUserException: User already exists
at app.UserManager.addUser(UserManager.java:23)
at unit.FirstTestNGTest.addDuplicateThrowsException(FirstTestNGTest.java:62)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:77)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:110)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:106)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
]]>
            </full-stacktrace>
          </exception> <!-- app.DuplicateUserException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addDuplicateThrowsException -->
        <test-method status="PASS" signature="globalBeforeMethodSetup()[pri:0, instance:unit.FirstTestNGTest@ba2a48]" name="globalBeforeMethodSetup" is-config="true" duration-ms="1" started-at="2020-09-10T13:55:05Z" finished-at="2020-09-10T13:55:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- globalBeforeMethodSetup -->
        <test-method status="PASS" signature="getExistingUserReturnsExistingSavedUser()[pri:0, instance:unit.FirstTestNGTest@ba2a48]" name="getExistingUserReturnsExistingSavedUser" duration-ms="2" started-at="2020-09-10T13:55:05Z" description="Verify that getUser method retrieves the correct existing user" finished-at="2020-09-10T13:55:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getExistingUserReturnsExistingSavedUser -->
        <test-method status="PASS" signature="customLocalSetupMethod(java.lang.reflect.Method)[pri:0, instance:unit.FirstTestNGTest@ba2a48]" name="customLocalSetupMethod" is-config="true" duration-ms="0" started-at="2020-09-10T13:55:05Z" finished-at="2020-09-10T13:55:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void unit.FirstTestNGTest.getExistingUserReturnsExistingSavedUser() throws app.DuplicateUserException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- customLocalSetupMethod -->
        <test-method status="PASS" signature="getNonExistingUserReturnsNull()[pri:0, instance:unit.FirstTestNGTest@ba2a48]" name="getNonExistingUserReturnsNull" duration-ms="0" started-at="2020-09-10T13:55:05Z" description="Verify that getUser method returns null if the user does not exist" finished-at="2020-09-10T13:55:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getNonExistingUserReturnsNull -->
        <test-method status="PASS" signature="globalBeforeMethodSetup()[pri:0, instance:unit.FirstTestNGTest@ba2a48]" name="globalBeforeMethodSetup" is-config="true" duration-ms="0" started-at="2020-09-10T13:55:05Z" finished-at="2020-09-10T13:55:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- globalBeforeMethodSetup -->
        <test-method status="PASS" signature="customLocalSetupMethod(java.lang.reflect.Method)[pri:0, instance:unit.FirstTestNGTest@ba2a48]" name="customLocalSetupMethod" is-config="true" duration-ms="0" started-at="2020-09-10T13:55:05Z" finished-at="2020-09-10T13:55:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void unit.FirstTestNGTest.getNonExistingUserReturnsNull()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- customLocalSetupMethod -->
        <test-method status="PASS" signature="customLocalSetupMethod(java.lang.reflect.Method)[pri:0, instance:unit.FirstTestNGTest@ba2a48]" name="customLocalSetupMethod" is-config="true" duration-ms="0" started-at="2020-09-10T13:55:05Z" finished-at="2020-09-10T13:55:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void unit.FirstTestNGTest.successfulAddUserReturnsTrue() throws app.DuplicateUserException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- customLocalSetupMethod -->
        <test-method status="PASS" signature="globalBeforeMethodSetup()[pri:0, instance:unit.FirstTestNGTest@ba2a48]" name="globalBeforeMethodSetup" is-config="true" duration-ms="0" started-at="2020-09-10T13:55:05Z" finished-at="2020-09-10T13:55:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- globalBeforeMethodSetup -->
        <test-method status="PASS" signature="successfulAddUserReturnsTrue()[pri:0, instance:unit.FirstTestNGTest@ba2a48]" name="successfulAddUserReturnsTrue" duration-ms="0" started-at="2020-09-10T13:55:05Z" description="Verify that addUser method returns true when successful" finished-at="2020-09-10T13:55:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- successfulAddUserReturnsTrue -->
      </class> <!-- unit.FirstTestNGTest -->
    </test> <!-- Command line test -->
  </suite> <!-- unit.FirstTestNGTest -->
</testng-results>
